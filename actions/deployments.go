package actions

import (
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/buffalo/worker"
	"github.com/gobuffalo/pop"
	"github.com/pkg/errors"
	"manno.name/mm/faas/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Deployment)
// DB Table: Plural (deployments)
// Resource: Plural (Deployments)
// Path: Plural (/deployments)
// View Template Folder: Plural (/templates/deployments/)

// DeploymentsResource is the resource for the Deployment model
type DeploymentsResource struct {
	buffalo.Resource
}

// List gets all Deployments. This function is mapped to the path
// GET /deployments
func (v DeploymentsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	deployments := &models.Deployments{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Deployments from the DB
	if err := q.All(deployments); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, deployments))
}

// Show gets the data for one Deployment. This function is mapped to
// the path GET /deployments/{deployment_id}
func (v DeploymentsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Deployment
	deployment := &models.Deployment{}

	// To find the Deployment the parameter deployment_id is used.
	if err := tx.Find(deployment, c.Param("deployment_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, deployment))
}

// New renders the form for creating a new Deployment.
// This function is mapped to the path GET /deployments/new
func (v DeploymentsResource) New(c buffalo.Context) error {
	return c.Render(200, r.Auto(c, models.NewDeployment()))
}

// Create adds a Deployment to the DB. This function is mapped to the
// path POST /deployments
func (v DeploymentsResource) Create(c buffalo.Context) error {
	// Allocate an empty Deployment
	deployment := &models.Deployment{}

	// Bind deployment to the html form elements
	if err := c.Bind(deployment); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(deployment)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, deployment))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Deployment was created successfully")

	// and redirect to the deployments index page
	return c.Render(201, r.Auto(c, deployment))
}

// Edit renders a edit form for a Deployment. This function is
// mapped to the path GET /deployments/{deployment_id}/edit
func (v DeploymentsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Deployment
	deployment := &models.Deployment{}

	if err := tx.Find(deployment, c.Param("deployment_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, deployment))
}

// Update changes a Deployment in the DB. This function is mapped to
// the path PUT /deployments/{deployment_id}
func (v DeploymentsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Deployment
	deployment := &models.Deployment{}

	if err := tx.Find(deployment, c.Param("deployment_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Deployment to the html form elements
	if err := c.Bind(deployment); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(deployment)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, deployment))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Deployment was updated successfully")

	// and redirect to the deployments index page
	return c.Render(200, r.Auto(c, deployment))
}

// Destroy deletes a Deployment from the DB. This function is mapped
// to the path DELETE /deployments/{deployment_id}
func (v DeploymentsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Deployment
	deployment := &models.Deployment{}

	// To find the Deployment the parameter deployment_id is used.
	if err := tx.Find(deployment, c.Param("deployment_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(deployment); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Deployment was destroyed successfully")

	// Redirect to the deployments index page
	return c.Render(200, r.Auto(c, deployment))
}

func DeploymentsSet(c buffalo.Context) error {
	err := runDeploymentJob(c, "set_gke")
	if err != nil {
		return err
	}
	return c.Redirect(302, "/deployments")
}

func DeploymentsUnset(c buffalo.Context) error {
	err := runDeploymentJob(c, "unset_gke")
	if err != nil {
		return err
	}
	return c.Redirect(302, "/deployments")
}

func runDeploymentJob(c buffalo.Context, method string) error {
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	deployment := &models.Deployment{}
	if err := tx.Find(deployment, c.Param("deployment_id")); err != nil {
		return c.Error(404, err)
	}

	w := app.Worker
	w.Perform(worker.Job{
		Queue:   "default",
		Handler: method,
		Args: worker.Args{
			"deployment_id": c.Param("deployment_id"),
		},
	})
	return nil
}
